Excellence.Ims.Infrastructure.Layer
Excellence.Ims.Business.Layer
Excellence.Ims.Service.Layer
Excellence.Ims.Interface.Layer
Excellence.Ims.Test



Infrastructure
Business
Service
Presentation


Data (SqlServer, PostgreSql)
Logic/Business/Model
Service
(Controller)
View (Web, Uwp, Razor, React)


Database: Sql Server
Infrastructure Layer: Entity Framework Core
Programming Language: C#
Design Pattern: MVC? Repository Pattern?
Interface: Razor Pages

Miscellaneous Other:
	Service Injection (D: Dependency Inversion Principle)
	Abstraction with Interfaces/Contracts (I: Interface Segregation Principle)
	Inheritance vs. Composition (O: Open/Closed Principle)

SOLID Principle
	Single-responsibility principle
		A class should only have a single responsibility, that is, only changes to one part of the software's specification should be able to affect the specification of the class.
	Open–closed principle
		"Software entities ... should be open for extension, but closed for modification."
	Liskov substitution principle
		"Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program." See also design by contract.
	Interface segregation principle
		"Many client-specific interfaces are better than one general-purpose interface."
	Dependency inversion principle
		One should "depend upon abstractions, [not] concretions."



## SO Answer (https://stackoverflow.com/a/7474357)
1 - ProjectName.Interfaces (Class library, entities's interfaces);
2 - ProjectName.DAL (Class library, the only one allowed to even know the EF is used, the POCO entities implement the interfaces of project 1 using another file where you redeclare same objects using partial classes...);
3 - ProjectName.BL (Class library, Business logic, references the two projects above 1 and 2);
4 - ProjectName.Web (ASP.NET MVC application, Presentation Layer, references two projects 1 and 3 but NOT 2);

ProjectName.Interface, ProjectName.Data, ProjectName.BL, ProjectName.Web and ProjectName.Test